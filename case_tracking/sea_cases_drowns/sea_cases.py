# -*- coding: utf-8 -*-
"""sea_cases.ipynb

Automatically generated by Colab.

"""

import pandas as pd
import numpy as np

keywords = 'gemi|liman|sahil güvenlik|zeyport|buyukdere limanı|tekne|kıyı emniyeti|hudut ve sahiller'

path= 'data/case_reports/europe/'

excel_janjun2023= pd.ExcelFile(path+'2023/total/'+'2023 YILI OCAK-HAZİRAN AVRUPA BİRLEŞMİŞ DEFTER ASOS TANI DÖNÜŞTÜRÜLMÜŞ.xlsx')
excel_juldec2023= pd.ExcelFile(path+'2023/total/'+'2023 YILI TEMMUZ-ARALIK AVRUPA BİRLEŞMİŞ DEFTER ASOS TANI DÖNÜŞTÜRÜLMÜŞ.xlsx')

excel_jan= pd.ExcelFile(path+'2024/monthly/'+'1-OCAK 2024 AVR ASOS TANIDÖNÜŞTÜRÜLMÜŞ DEFTER.xlsx')
excel_feb= pd.ExcelFile(path+'2024/monthly/'+'2-ŞUBAT 2024 AVR ASOS TANIDÖNÜŞTÜRÜLMÜŞ DEFTER.xlsx')
excel_mar= pd.ExcelFile(path+'2024/monthly/'+'3-MART 2024 AVR ASOS TANIDÖNÜŞTÜRÜLMÜŞ DEFTER.xlsx')
excel_apr= pd.ExcelFile(path+'2024/monthly/'+'4-NİSAN 2024 AVR ASOS TANIDÖNÜŞTÜRÜLMÜŞ DEFTER.xlsx')
excel_may= pd.ExcelFile(path+'2024/monthly/'+'5-MAYIS 2024 AVR ASOS TANIDÖNÜŞTÜRÜLMÜŞ DEFTER.xlsx')
excel_jun= pd.ExcelFile(path+'2024/monthly/'+'6-HAZİRAN 2024 AVR ASOS TANIDÖNÜŞTÜRÜLMÜŞ DEFTER.xlsx')

df1= {sheet_name:excel_janjun2023.parse(sheet_name) for sheet_name in excel_janjun2023.sheet_names}
df2= {sheet_name:excel_juldec2023.parse(sheet_name) for sheet_name in excel_juldec2023.sheet_names}

df3= {sheet_name:excel_jan.parse(sheet_name) for sheet_name in excel_jan.sheet_names}
df4= {sheet_name:excel_feb.parse(sheet_name) for sheet_name in excel_feb.sheet_names}
df5= {sheet_name:excel_mar.parse(sheet_name) for sheet_name in excel_mar.sheet_names}
df6= {sheet_name:excel_apr.parse(sheet_name) for sheet_name in excel_apr.sheet_names}
df7= {sheet_name:excel_may.parse(sheet_name) for sheet_name in excel_may.sheet_names}
df8= {sheet_name:excel_jun.parse(sheet_name) for sheet_name in excel_jun.sheet_names}

print(df1.keys(), '\n---------- ')
print(df2.keys(), '\n---------- ')
print(df3.keys(), '\n---------- ')
print(df4.keys(), '\n---------- ')
print(df5.keys(), '\n---------- ')
print(df6.keys(), '\n---------- ')
print(df7.keys(), '\n---------- ')
print(df8.keys(), '\n---------- ')

string= 'limanı'

keywords= keywords.upper()

df= pd.concat([df1['Sheet1'],df2['Sheet1'],df3['54230'],df4['48247'], df5['49926'],df6['NİSAN - 50.014'], df7['52340'], df8['52852-DEFTER']])

df = pd.concat([df1['Sheet1'],df2['Sheet1']])

temp_df = df.copy()

for i in temp_df.columns:
  print(i)

keywords

sea_cases= pd.DataFrame()
for col in ["Vaka Adresi", "İhbar Adresi", "Vaka Yeri Aciklama", "KKM Açıklama", "İstasyon Açıklama", "Olay\nAçıklaması"]:
    temp_df[col] = temp_df[col].str.upper().fillna('UNKNOWN')  # Convert each column to uppercase individually
    temp_df[col]= temp_df[col].str.replace('İ', 'I').str.replace('Ş', 'S').str.replace('Ğ', 'G').str.replace('Ü', 'U').str.replace('Ö', 'O').str.replace('Ç', 'C')  # Replace specific characters
    # Now you can apply the .contains() method to each column as needed.
    # Example:
    sea_cases= pd.concat([sea_cases,temp_df[temp_df[col].str.contains(keywords)]] )
    sea_cases[col] = sea_cases[col].astype(str).fillna('UNKNOWN')
    sea_cases= sea_cases[~(sea_cases[col].str.contains('NAKIL'))]
    sea_cases= sea_cases[~(sea_cases[col].str.contains('HAVALIMANI'))]
    sea_cases= sea_cases[~(sea_cases[col].str.contains('HAVA LIMANI'))]
    sea_cases= sea_cases[~(sea_cases[col].str.contains('BALTALIMANI'))]
    sea_cases= sea_cases[~(sea_cases[col].str.contains('LIMAN SK'))]
    sea_cases= sea_cases[~(sea_cases[col].str.contains('LIMAN CD'))]
    sea_cases= sea_cases[~(sea_cases[col].str.contains('HAVALIMAN'))]

sea_cases
################################################################################


bogulma_df= pd.read_excel('C:/Users/mkaya/Downloads/bogulma_ilce_bulundu.xlsx')

bogulma_df.rename(columns={'IHBAR ADRESI': 'İhbar Adresi', 'KKM ACIKLAMA':'KKM Açıklama', 'EKIP NO':'Ekip No', 'IHBAR/CAGRI TARIHI':'İhbar/Çağrı Tarihi',bogulma_df.columns[5]:'İhbar/Çağrı  Saati'}, inplace=True)

[col for col in df.columns]

df_reduced= df[['Ekip No','KKM Protokol','İhbar/Çağrı Tarihi', 'İhbar/Çağrı  Saati','KKM Açıklama','Vakanın Enlemi','Vakanın Boylamı']]

def date_format(row):
  try:
    return pd.to_datetime(row, format='%d-%m-%Y %H:%M:%S')
  except:
    try:
      return pd.to_datetime(row, format='%Y-%m-d %H:%M:%S')
    except:
      return '-'

df_reduced['TARIH SAAT']= df_reduced['İhbar/Çağrı Tarihi'].astype(str) + ' ' + df_reduced['İhbar/Çağrı  Saati'].astype(str)
bogulma_df['TARIH SAAT']= bogulma_df['İhbar/Çağrı Tarihi'].astype(str) + ' ' + bogulma_df['İhbar/Çağrı  Saati'].astype(str)

df_reduced['TARIH SAAT']= df_reduced['TARIH SAAT'].apply(date_format)
bogulma_df['TARIH SAAT']= bogulma_df['TARIH SAAT'].apply(date_format)



df_reduced= df_reduced[~(df_reduced['TARIH SAAT']=='-')]

len(bogulma_df)

df_reduced['TARIH SAAT'] = pd.to_datetime(df_reduced['TARIH SAAT'])
bogulma_df['TARIH SAAT'] = pd.to_datetime(bogulma_df['TARIH SAAT'])

pd.merge(bogulma_df, df_reduced, on=['Ekip No','TARIH SAAT'], how= 'inner').to_excel('bogulma.xlsx')



import pandas as pd
import numpy as np

bogulma_df = pd.read_excel('bogulma.xlsx')

bogulma_df['LATITUDE/LONGITUDE'] = bogulma_df['Vakanın Enlemi'].astype(str) + ' ' + bogulma_df['Vakanın Boylamı'].astype(str)

bogulma_df= bogulma_df[bogulma_df['Vakanın Enlemi'] != '-']

bogulma_df.columns

bogulma_df['VALUE']= 1

bogulma_df

monthly_district = bogulma_df.groupby(['AY','MAHALLE_ARGE']).agg({'VALUE':'sum'}).sort_values('VALUE', ascending=False).reset_index()

monthly_district.rename(columns={'VALUE':'MAHALLE AY TOPLAMI'}, inplace=True)

bogulma_df= pd.merge(bogulma_df,
         bogulma_df.groupby('MAHALLE_ARGE').agg({'VALUE':'sum'}).sort_values('VALUE', ascending=False).reset_index(),
         on='MAHALLE_ARGE',
         how='left').rename(columns={'VALUE_x':'VALUE', 'VALUE_y':'MAHALLE TOPLAMI'})

bogulma_df = pd.merge(bogulma_df, monthly_district, on=['AY','MAHALLE_ARGE'], how='left')

bogulma_df.sort_values(by='MAHALLE AY TOPLAMI', ascending= False)

bogulma_df.rename(columns={'TARIH SAAT':'Date'}, inplace=True)

import plotly.express as px
df = bogulma_df
fig = px.scatter_mapbox(df, lat="Vakanın Enlemi", lon="Vakanın Boylamı", color="AY", size="MAHALLE TOPLAMI",hover_data=['MAHALLE AY TOPLAMI'],hover_name='MAHALLE_ARGE',
                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=10,
                  mapbox_style="carto-positron")
fig.write_html("C:/Users/mkaya/Onedrive/Masaüstü/file.html")

bogulma_df

